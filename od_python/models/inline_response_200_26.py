# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20026(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, match_id=None, match_seq_num=None, radiant_win=None, start_time=None, duration=None, radiant_team=None, dire_team=None):
        """
        InlineResponse20026 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'match_id': 'int',
            'match_seq_num': 'int',
            'radiant_win': 'bool',
            'start_time': 'int',
            'duration': 'int',
            'radiant_team': 'str',
            'dire_team': 'str'
        }

        self.attribute_map = {
            'match_id': 'match_id',
            'match_seq_num': 'match_seq_num',
            'radiant_win': 'radiant_win',
            'start_time': 'start_time',
            'duration': 'duration',
            'radiant_team': 'radiant_team',
            'dire_team': 'dire_team'
        }

        self._match_id = match_id
        self._match_seq_num = match_seq_num
        self._radiant_win = radiant_win
        self._start_time = start_time
        self._duration = duration
        self._radiant_team = radiant_team
        self._dire_team = dire_team

    @property
    def match_id(self):
        """
        Gets the match_id of this InlineResponse20026.
        match_id

        :return: The match_id of this InlineResponse20026.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """
        Sets the match_id of this InlineResponse20026.
        match_id

        :param match_id: The match_id of this InlineResponse20026.
        :type: int
        """

        self._match_id = match_id

    @property
    def match_seq_num(self):
        """
        Gets the match_seq_num of this InlineResponse20026.
        match_seq_num

        :return: The match_seq_num of this InlineResponse20026.
        :rtype: int
        """
        return self._match_seq_num

    @match_seq_num.setter
    def match_seq_num(self, match_seq_num):
        """
        Sets the match_seq_num of this InlineResponse20026.
        match_seq_num

        :param match_seq_num: The match_seq_num of this InlineResponse20026.
        :type: int
        """

        self._match_seq_num = match_seq_num

    @property
    def radiant_win(self):
        """
        Gets the radiant_win of this InlineResponse20026.
        Boolean indicating whether Radiant won the match

        :return: The radiant_win of this InlineResponse20026.
        :rtype: bool
        """
        return self._radiant_win

    @radiant_win.setter
    def radiant_win(self, radiant_win):
        """
        Sets the radiant_win of this InlineResponse20026.
        Boolean indicating whether Radiant won the match

        :param radiant_win: The radiant_win of this InlineResponse20026.
        :type: bool
        """

        self._radiant_win = radiant_win

    @property
    def start_time(self):
        """
        Gets the start_time of this InlineResponse20026.
        start_time

        :return: The start_time of this InlineResponse20026.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this InlineResponse20026.
        start_time

        :param start_time: The start_time of this InlineResponse20026.
        :type: int
        """

        self._start_time = start_time

    @property
    def duration(self):
        """
        Gets the duration of this InlineResponse20026.
        Duration of the game in seconds

        :return: The duration of this InlineResponse20026.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this InlineResponse20026.
        Duration of the game in seconds

        :param duration: The duration of this InlineResponse20026.
        :type: int
        """

        self._duration = duration

    @property
    def radiant_team(self):
        """
        Gets the radiant_team of this InlineResponse20026.
        radiant_team

        :return: The radiant_team of this InlineResponse20026.
        :rtype: str
        """
        return self._radiant_team

    @radiant_team.setter
    def radiant_team(self, radiant_team):
        """
        Sets the radiant_team of this InlineResponse20026.
        radiant_team

        :param radiant_team: The radiant_team of this InlineResponse20026.
        :type: str
        """

        self._radiant_team = radiant_team

    @property
    def dire_team(self):
        """
        Gets the dire_team of this InlineResponse20026.
        dire_team

        :return: The dire_team of this InlineResponse20026.
        :rtype: str
        """
        return self._dire_team

    @dire_team.setter
    def dire_team(self, dire_team):
        """
        Sets the dire_team of this InlineResponse20026.
        dire_team

        :param dire_team: The dire_team of this InlineResponse20026.
        :type: str
        """

        self._dire_team = dire_team

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
