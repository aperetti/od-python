# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20012Profile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, personaname=None, name=None, plus=None, cheese=None, steamid=None, avatar=None, avatarmedium=None, avatarfull=None, profileurl=None, last_login=None, loccountrycode=None, is_contributor=False):
        """
        InlineResponse20012Profile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'int',
            'personaname': 'str',
            'name': 'str',
            'plus': 'bool',
            'cheese': 'int',
            'steamid': 'str',
            'avatar': 'str',
            'avatarmedium': 'str',
            'avatarfull': 'str',
            'profileurl': 'str',
            'last_login': 'str',
            'loccountrycode': 'str',
            'is_contributor': 'bool'
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'personaname': 'personaname',
            'name': 'name',
            'plus': 'plus',
            'cheese': 'cheese',
            'steamid': 'steamid',
            'avatar': 'avatar',
            'avatarmedium': 'avatarmedium',
            'avatarfull': 'avatarfull',
            'profileurl': 'profileurl',
            'last_login': 'last_login',
            'loccountrycode': 'loccountrycode',
            'is_contributor': 'is_contributor'
        }

        self._account_id = account_id
        self._personaname = personaname
        self._name = name
        self._plus = plus
        self._cheese = cheese
        self._steamid = steamid
        self._avatar = avatar
        self._avatarmedium = avatarmedium
        self._avatarfull = avatarfull
        self._profileurl = profileurl
        self._last_login = last_login
        self._loccountrycode = loccountrycode
        self._is_contributor = is_contributor

    @property
    def account_id(self):
        """
        Gets the account_id of this InlineResponse20012Profile.
        account_id

        :return: The account_id of this InlineResponse20012Profile.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this InlineResponse20012Profile.
        account_id

        :param account_id: The account_id of this InlineResponse20012Profile.
        :type: int
        """

        self._account_id = account_id

    @property
    def personaname(self):
        """
        Gets the personaname of this InlineResponse20012Profile.
        personaname

        :return: The personaname of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._personaname

    @personaname.setter
    def personaname(self, personaname):
        """
        Sets the personaname of this InlineResponse20012Profile.
        personaname

        :param personaname: The personaname of this InlineResponse20012Profile.
        :type: str
        """

        self._personaname = personaname

    @property
    def name(self):
        """
        Gets the name of this InlineResponse20012Profile.
        name

        :return: The name of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse20012Profile.
        name

        :param name: The name of this InlineResponse20012Profile.
        :type: str
        """

        self._name = name

    @property
    def plus(self):
        """
        Gets the plus of this InlineResponse20012Profile.
        Boolean indicating status of current Dota Plus subscription

        :return: The plus of this InlineResponse20012Profile.
        :rtype: bool
        """
        return self._plus

    @plus.setter
    def plus(self, plus):
        """
        Sets the plus of this InlineResponse20012Profile.
        Boolean indicating status of current Dota Plus subscription

        :param plus: The plus of this InlineResponse20012Profile.
        :type: bool
        """

        self._plus = plus

    @property
    def cheese(self):
        """
        Gets the cheese of this InlineResponse20012Profile.
        cheese

        :return: The cheese of this InlineResponse20012Profile.
        :rtype: int
        """
        return self._cheese

    @cheese.setter
    def cheese(self, cheese):
        """
        Sets the cheese of this InlineResponse20012Profile.
        cheese

        :param cheese: The cheese of this InlineResponse20012Profile.
        :type: int
        """

        self._cheese = cheese

    @property
    def steamid(self):
        """
        Gets the steamid of this InlineResponse20012Profile.
        steamid

        :return: The steamid of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._steamid

    @steamid.setter
    def steamid(self, steamid):
        """
        Sets the steamid of this InlineResponse20012Profile.
        steamid

        :param steamid: The steamid of this InlineResponse20012Profile.
        :type: str
        """

        self._steamid = steamid

    @property
    def avatar(self):
        """
        Gets the avatar of this InlineResponse20012Profile.
        avatar

        :return: The avatar of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this InlineResponse20012Profile.
        avatar

        :param avatar: The avatar of this InlineResponse20012Profile.
        :type: str
        """

        self._avatar = avatar

    @property
    def avatarmedium(self):
        """
        Gets the avatarmedium of this InlineResponse20012Profile.
        avatarmedium

        :return: The avatarmedium of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._avatarmedium

    @avatarmedium.setter
    def avatarmedium(self, avatarmedium):
        """
        Sets the avatarmedium of this InlineResponse20012Profile.
        avatarmedium

        :param avatarmedium: The avatarmedium of this InlineResponse20012Profile.
        :type: str
        """

        self._avatarmedium = avatarmedium

    @property
    def avatarfull(self):
        """
        Gets the avatarfull of this InlineResponse20012Profile.
        avatarfull

        :return: The avatarfull of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._avatarfull

    @avatarfull.setter
    def avatarfull(self, avatarfull):
        """
        Sets the avatarfull of this InlineResponse20012Profile.
        avatarfull

        :param avatarfull: The avatarfull of this InlineResponse20012Profile.
        :type: str
        """

        self._avatarfull = avatarfull

    @property
    def profileurl(self):
        """
        Gets the profileurl of this InlineResponse20012Profile.
        profileurl

        :return: The profileurl of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._profileurl

    @profileurl.setter
    def profileurl(self, profileurl):
        """
        Sets the profileurl of this InlineResponse20012Profile.
        profileurl

        :param profileurl: The profileurl of this InlineResponse20012Profile.
        :type: str
        """

        self._profileurl = profileurl

    @property
    def last_login(self):
        """
        Gets the last_login of this InlineResponse20012Profile.
        last_login

        :return: The last_login of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """
        Sets the last_login of this InlineResponse20012Profile.
        last_login

        :param last_login: The last_login of this InlineResponse20012Profile.
        :type: str
        """

        self._last_login = last_login

    @property
    def loccountrycode(self):
        """
        Gets the loccountrycode of this InlineResponse20012Profile.
        loccountrycode

        :return: The loccountrycode of this InlineResponse20012Profile.
        :rtype: str
        """
        return self._loccountrycode

    @loccountrycode.setter
    def loccountrycode(self, loccountrycode):
        """
        Sets the loccountrycode of this InlineResponse20012Profile.
        loccountrycode

        :param loccountrycode: The loccountrycode of this InlineResponse20012Profile.
        :type: str
        """

        self._loccountrycode = loccountrycode

    @property
    def is_contributor(self):
        """
        Gets the is_contributor of this InlineResponse20012Profile.
        Boolean indicating if the user contributed to the development of OpenDota

        :return: The is_contributor of this InlineResponse20012Profile.
        :rtype: bool
        """
        return self._is_contributor

    @is_contributor.setter
    def is_contributor(self, is_contributor):
        """
        Sets the is_contributor of this InlineResponse20012Profile.
        Boolean indicating if the user contributed to the development of OpenDota

        :param is_contributor: The is_contributor of this InlineResponse20012Profile.
        :type: bool
        """

        self._is_contributor = is_contributor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
