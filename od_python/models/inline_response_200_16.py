# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20016(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, last_played=None, win=None, games=None, with_win=None, with_games=None, against_win=None, against_games=None, with_gpm_sum=None, with_xpm_sum=None, personaname=None, name=None, is_contributor=None, last_login=None, avatar=None, avatarfull=None):
        """
        InlineResponse20016 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'int',
            'last_played': 'int',
            'win': 'int',
            'games': 'int',
            'with_win': 'int',
            'with_games': 'int',
            'against_win': 'int',
            'against_games': 'int',
            'with_gpm_sum': 'int',
            'with_xpm_sum': 'int',
            'personaname': 'str',
            'name': 'str',
            'is_contributor': 'bool',
            'last_login': 'str',
            'avatar': 'str',
            'avatarfull': 'str'
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'last_played': 'last_played',
            'win': 'win',
            'games': 'games',
            'with_win': 'with_win',
            'with_games': 'with_games',
            'against_win': 'against_win',
            'against_games': 'against_games',
            'with_gpm_sum': 'with_gpm_sum',
            'with_xpm_sum': 'with_xpm_sum',
            'personaname': 'personaname',
            'name': 'name',
            'is_contributor': 'is_contributor',
            'last_login': 'last_login',
            'avatar': 'avatar',
            'avatarfull': 'avatarfull'
        }

        self._account_id = account_id
        self._last_played = last_played
        self._win = win
        self._games = games
        self._with_win = with_win
        self._with_games = with_games
        self._against_win = against_win
        self._against_games = against_games
        self._with_gpm_sum = with_gpm_sum
        self._with_xpm_sum = with_xpm_sum
        self._personaname = personaname
        self._name = name
        self._is_contributor = is_contributor
        self._last_login = last_login
        self._avatar = avatar
        self._avatarfull = avatarfull

    @property
    def account_id(self):
        """
        Gets the account_id of this InlineResponse20016.
        account_id

        :return: The account_id of this InlineResponse20016.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this InlineResponse20016.
        account_id

        :param account_id: The account_id of this InlineResponse20016.
        :type: int
        """

        self._account_id = account_id

    @property
    def last_played(self):
        """
        Gets the last_played of this InlineResponse20016.
        last_played

        :return: The last_played of this InlineResponse20016.
        :rtype: int
        """
        return self._last_played

    @last_played.setter
    def last_played(self, last_played):
        """
        Sets the last_played of this InlineResponse20016.
        last_played

        :param last_played: The last_played of this InlineResponse20016.
        :type: int
        """

        self._last_played = last_played

    @property
    def win(self):
        """
        Gets the win of this InlineResponse20016.
        win

        :return: The win of this InlineResponse20016.
        :rtype: int
        """
        return self._win

    @win.setter
    def win(self, win):
        """
        Sets the win of this InlineResponse20016.
        win

        :param win: The win of this InlineResponse20016.
        :type: int
        """

        self._win = win

    @property
    def games(self):
        """
        Gets the games of this InlineResponse20016.
        games

        :return: The games of this InlineResponse20016.
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """
        Sets the games of this InlineResponse20016.
        games

        :param games: The games of this InlineResponse20016.
        :type: int
        """

        self._games = games

    @property
    def with_win(self):
        """
        Gets the with_win of this InlineResponse20016.
        with_win

        :return: The with_win of this InlineResponse20016.
        :rtype: int
        """
        return self._with_win

    @with_win.setter
    def with_win(self, with_win):
        """
        Sets the with_win of this InlineResponse20016.
        with_win

        :param with_win: The with_win of this InlineResponse20016.
        :type: int
        """

        self._with_win = with_win

    @property
    def with_games(self):
        """
        Gets the with_games of this InlineResponse20016.
        with_games

        :return: The with_games of this InlineResponse20016.
        :rtype: int
        """
        return self._with_games

    @with_games.setter
    def with_games(self, with_games):
        """
        Sets the with_games of this InlineResponse20016.
        with_games

        :param with_games: The with_games of this InlineResponse20016.
        :type: int
        """

        self._with_games = with_games

    @property
    def against_win(self):
        """
        Gets the against_win of this InlineResponse20016.
        against_win

        :return: The against_win of this InlineResponse20016.
        :rtype: int
        """
        return self._against_win

    @against_win.setter
    def against_win(self, against_win):
        """
        Sets the against_win of this InlineResponse20016.
        against_win

        :param against_win: The against_win of this InlineResponse20016.
        :type: int
        """

        self._against_win = against_win

    @property
    def against_games(self):
        """
        Gets the against_games of this InlineResponse20016.
        against_games

        :return: The against_games of this InlineResponse20016.
        :rtype: int
        """
        return self._against_games

    @against_games.setter
    def against_games(self, against_games):
        """
        Sets the against_games of this InlineResponse20016.
        against_games

        :param against_games: The against_games of this InlineResponse20016.
        :type: int
        """

        self._against_games = against_games

    @property
    def with_gpm_sum(self):
        """
        Gets the with_gpm_sum of this InlineResponse20016.
        with_gpm_sum

        :return: The with_gpm_sum of this InlineResponse20016.
        :rtype: int
        """
        return self._with_gpm_sum

    @with_gpm_sum.setter
    def with_gpm_sum(self, with_gpm_sum):
        """
        Sets the with_gpm_sum of this InlineResponse20016.
        with_gpm_sum

        :param with_gpm_sum: The with_gpm_sum of this InlineResponse20016.
        :type: int
        """

        self._with_gpm_sum = with_gpm_sum

    @property
    def with_xpm_sum(self):
        """
        Gets the with_xpm_sum of this InlineResponse20016.
        with_xpm_sum

        :return: The with_xpm_sum of this InlineResponse20016.
        :rtype: int
        """
        return self._with_xpm_sum

    @with_xpm_sum.setter
    def with_xpm_sum(self, with_xpm_sum):
        """
        Sets the with_xpm_sum of this InlineResponse20016.
        with_xpm_sum

        :param with_xpm_sum: The with_xpm_sum of this InlineResponse20016.
        :type: int
        """

        self._with_xpm_sum = with_xpm_sum

    @property
    def personaname(self):
        """
        Gets the personaname of this InlineResponse20016.
        personaname

        :return: The personaname of this InlineResponse20016.
        :rtype: str
        """
        return self._personaname

    @personaname.setter
    def personaname(self, personaname):
        """
        Sets the personaname of this InlineResponse20016.
        personaname

        :param personaname: The personaname of this InlineResponse20016.
        :type: str
        """

        self._personaname = personaname

    @property
    def name(self):
        """
        Gets the name of this InlineResponse20016.
        name

        :return: The name of this InlineResponse20016.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse20016.
        name

        :param name: The name of this InlineResponse20016.
        :type: str
        """

        self._name = name

    @property
    def is_contributor(self):
        """
        Gets the is_contributor of this InlineResponse20016.
        is_contributor

        :return: The is_contributor of this InlineResponse20016.
        :rtype: bool
        """
        return self._is_contributor

    @is_contributor.setter
    def is_contributor(self, is_contributor):
        """
        Sets the is_contributor of this InlineResponse20016.
        is_contributor

        :param is_contributor: The is_contributor of this InlineResponse20016.
        :type: bool
        """

        self._is_contributor = is_contributor

    @property
    def last_login(self):
        """
        Gets the last_login of this InlineResponse20016.
        last_login

        :return: The last_login of this InlineResponse20016.
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """
        Sets the last_login of this InlineResponse20016.
        last_login

        :param last_login: The last_login of this InlineResponse20016.
        :type: str
        """

        self._last_login = last_login

    @property
    def avatar(self):
        """
        Gets the avatar of this InlineResponse20016.
        avatar

        :return: The avatar of this InlineResponse20016.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this InlineResponse20016.
        avatar

        :param avatar: The avatar of this InlineResponse20016.
        :type: str
        """

        self._avatar = avatar

    @property
    def avatarfull(self):
        """
        Gets the avatarfull of this InlineResponse20016.
        avatarfull

        :return: The avatarfull of this InlineResponse20016.
        :rtype: str
        """
        return self._avatarfull

    @avatarfull.setter
    def avatarfull(self, avatarfull):
        """
        Sets the avatarfull of this InlineResponse20016.
        avatarfull

        :param avatarfull: The avatarfull of this InlineResponse20016.
        :type: str
        """

        self._avatarfull = avatarfull

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
