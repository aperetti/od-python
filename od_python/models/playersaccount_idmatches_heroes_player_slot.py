# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PlayersaccountIdmatchesHeroesPlayerSlot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, hero_id=None, player_slot=None):
        """
        PlayersaccountIdmatchesHeroesPlayerSlot - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'int',
            'hero_id': 'int',
            'player_slot': 'int'
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'hero_id': 'hero_id',
            'player_slot': 'player_slot'
        }

        self._account_id = account_id
        self._hero_id = hero_id
        self._player_slot = player_slot

    @property
    def account_id(self):
        """
        Gets the account_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        account_id

        :return: The account_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        account_id

        :param account_id: The account_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        :type: int
        """

        self._account_id = account_id

    @property
    def hero_id(self):
        """
        Gets the hero_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        The ID value of the hero played

        :return: The hero_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        :rtype: int
        """
        return self._hero_id

    @hero_id.setter
    def hero_id(self, hero_id):
        """
        Sets the hero_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        The ID value of the hero played

        :param hero_id: The hero_id of this PlayersaccountIdmatchesHeroesPlayerSlot.
        :type: int
        """

        self._hero_id = hero_id

    @property
    def player_slot(self):
        """
        Gets the player_slot of this PlayersaccountIdmatchesHeroesPlayerSlot.
        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire

        :return: The player_slot of this PlayersaccountIdmatchesHeroesPlayerSlot.
        :rtype: int
        """
        return self._player_slot

    @player_slot.setter
    def player_slot(self, player_slot):
        """
        Sets the player_slot of this PlayersaccountIdmatchesHeroesPlayerSlot.
        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire

        :param player_slot: The player_slot of this PlayersaccountIdmatchesHeroesPlayerSlot.
        :type: int
        """

        self._player_slot = player_slot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
