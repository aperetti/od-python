# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20012(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tracked_until=None, solo_competitive_rank=None, competitive_rank=None, rank_tier=None, leaderboard_rank=None, mmr_estimate=None, profile=None):
        """
        InlineResponse20012 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tracked_until': 'str',
            'solo_competitive_rank': 'str',
            'competitive_rank': 'str',
            'rank_tier': 'float',
            'leaderboard_rank': 'float',
            'mmr_estimate': 'InlineResponse20012MmrEstimate',
            'profile': 'InlineResponse20012Profile'
        }

        self.attribute_map = {
            'tracked_until': 'tracked_until',
            'solo_competitive_rank': 'solo_competitive_rank',
            'competitive_rank': 'competitive_rank',
            'rank_tier': 'rank_tier',
            'leaderboard_rank': 'leaderboard_rank',
            'mmr_estimate': 'mmr_estimate',
            'profile': 'profile'
        }

        self._tracked_until = tracked_until
        self._solo_competitive_rank = solo_competitive_rank
        self._competitive_rank = competitive_rank
        self._rank_tier = rank_tier
        self._leaderboard_rank = leaderboard_rank
        self._mmr_estimate = mmr_estimate
        self._profile = profile

    @property
    def tracked_until(self):
        """
        Gets the tracked_until of this InlineResponse20012.
        tracked_until

        :return: The tracked_until of this InlineResponse20012.
        :rtype: str
        """
        return self._tracked_until

    @tracked_until.setter
    def tracked_until(self, tracked_until):
        """
        Sets the tracked_until of this InlineResponse20012.
        tracked_until

        :param tracked_until: The tracked_until of this InlineResponse20012.
        :type: str
        """

        self._tracked_until = tracked_until

    @property
    def solo_competitive_rank(self):
        """
        Gets the solo_competitive_rank of this InlineResponse20012.
        solo_competitive_rank

        :return: The solo_competitive_rank of this InlineResponse20012.
        :rtype: str
        """
        return self._solo_competitive_rank

    @solo_competitive_rank.setter
    def solo_competitive_rank(self, solo_competitive_rank):
        """
        Sets the solo_competitive_rank of this InlineResponse20012.
        solo_competitive_rank

        :param solo_competitive_rank: The solo_competitive_rank of this InlineResponse20012.
        :type: str
        """

        self._solo_competitive_rank = solo_competitive_rank

    @property
    def competitive_rank(self):
        """
        Gets the competitive_rank of this InlineResponse20012.
        competitive_rank

        :return: The competitive_rank of this InlineResponse20012.
        :rtype: str
        """
        return self._competitive_rank

    @competitive_rank.setter
    def competitive_rank(self, competitive_rank):
        """
        Sets the competitive_rank of this InlineResponse20012.
        competitive_rank

        :param competitive_rank: The competitive_rank of this InlineResponse20012.
        :type: str
        """

        self._competitive_rank = competitive_rank

    @property
    def rank_tier(self):
        """
        Gets the rank_tier of this InlineResponse20012.
        rank_tier

        :return: The rank_tier of this InlineResponse20012.
        :rtype: float
        """
        return self._rank_tier

    @rank_tier.setter
    def rank_tier(self, rank_tier):
        """
        Sets the rank_tier of this InlineResponse20012.
        rank_tier

        :param rank_tier: The rank_tier of this InlineResponse20012.
        :type: float
        """

        self._rank_tier = rank_tier

    @property
    def leaderboard_rank(self):
        """
        Gets the leaderboard_rank of this InlineResponse20012.
        leaderboard_rank

        :return: The leaderboard_rank of this InlineResponse20012.
        :rtype: float
        """
        return self._leaderboard_rank

    @leaderboard_rank.setter
    def leaderboard_rank(self, leaderboard_rank):
        """
        Sets the leaderboard_rank of this InlineResponse20012.
        leaderboard_rank

        :param leaderboard_rank: The leaderboard_rank of this InlineResponse20012.
        :type: float
        """

        self._leaderboard_rank = leaderboard_rank

    @property
    def mmr_estimate(self):
        """
        Gets the mmr_estimate of this InlineResponse20012.


        :return: The mmr_estimate of this InlineResponse20012.
        :rtype: InlineResponse20012MmrEstimate
        """
        return self._mmr_estimate

    @mmr_estimate.setter
    def mmr_estimate(self, mmr_estimate):
        """
        Sets the mmr_estimate of this InlineResponse20012.


        :param mmr_estimate: The mmr_estimate of this InlineResponse20012.
        :type: InlineResponse20012MmrEstimate
        """

        self._mmr_estimate = mmr_estimate

    @property
    def profile(self):
        """
        Gets the profile of this InlineResponse20012.


        :return: The profile of this InlineResponse20012.
        :rtype: InlineResponse20012Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """
        Sets the profile of this InlineResponse20012.


        :param profile: The profile of this InlineResponse20012.
        :type: InlineResponse20012Profile
        """

        self._profile = profile

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
