# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20013(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, leaver_status=None, game_mode=None, lobby_type=None, lane_role=None, region=None, patch=None):
        """
        InlineResponse20013 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'leaver_status': 'object',
            'game_mode': 'object',
            'lobby_type': 'object',
            'lane_role': 'object',
            'region': 'object',
            'patch': 'object'
        }

        self.attribute_map = {
            'leaver_status': 'leaver_status',
            'game_mode': 'game_mode',
            'lobby_type': 'lobby_type',
            'lane_role': 'lane_role',
            'region': 'region',
            'patch': 'patch'
        }

        self._leaver_status = leaver_status
        self._game_mode = game_mode
        self._lobby_type = lobby_type
        self._lane_role = lane_role
        self._region = region
        self._patch = patch

    @property
    def leaver_status(self):
        """
        Gets the leaver_status of this InlineResponse20013.
        Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned

        :return: The leaver_status of this InlineResponse20013.
        :rtype: object
        """
        return self._leaver_status

    @leaver_status.setter
    def leaver_status(self, leaver_status):
        """
        Sets the leaver_status of this InlineResponse20013.
        Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned

        :param leaver_status: The leaver_status of this InlineResponse20013.
        :type: object
        """

        self._leaver_status = leaver_status

    @property
    def game_mode(self):
        """
        Gets the game_mode of this InlineResponse20013.
        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json

        :return: The game_mode of this InlineResponse20013.
        :rtype: object
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """
        Sets the game_mode of this InlineResponse20013.
        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json

        :param game_mode: The game_mode of this InlineResponse20013.
        :type: object
        """

        self._game_mode = game_mode

    @property
    def lobby_type(self):
        """
        Gets the lobby_type of this InlineResponse20013.
        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json

        :return: The lobby_type of this InlineResponse20013.
        :rtype: object
        """
        return self._lobby_type

    @lobby_type.setter
    def lobby_type(self, lobby_type):
        """
        Sets the lobby_type of this InlineResponse20013.
        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json

        :param lobby_type: The lobby_type of this InlineResponse20013.
        :type: object
        """

        self._lobby_type = lobby_type

    @property
    def lane_role(self):
        """
        Gets the lane_role of this InlineResponse20013.
        lane_role

        :return: The lane_role of this InlineResponse20013.
        :rtype: object
        """
        return self._lane_role

    @lane_role.setter
    def lane_role(self, lane_role):
        """
        Sets the lane_role of this InlineResponse20013.
        lane_role

        :param lane_role: The lane_role of this InlineResponse20013.
        :type: object
        """

        self._lane_role = lane_role

    @property
    def region(self):
        """
        Gets the region of this InlineResponse20013.
        Integer corresponding to the region the game was played on

        :return: The region of this InlineResponse20013.
        :rtype: object
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this InlineResponse20013.
        Integer corresponding to the region the game was played on

        :param region: The region of this InlineResponse20013.
        :type: object
        """

        self._region = region

    @property
    def patch(self):
        """
        Gets the patch of this InlineResponse20013.
        patch

        :return: The patch of this InlineResponse20013.
        :rtype: object
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """
        Sets the patch of this InlineResponse20013.
        patch

        :param patch: The patch of this InlineResponse20013.
        :type: object
        """

        self._patch = patch

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
