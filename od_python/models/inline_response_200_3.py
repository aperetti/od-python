# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2003(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, localized_name=None, primary_attr=None, attack_type=None, roles=None):
        """
        InlineResponse2003 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'localized_name': 'str',
            'primary_attr': 'str',
            'attack_type': 'str',
            'roles': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'localized_name': 'localized_name',
            'primary_attr': 'primary_attr',
            'attack_type': 'attack_type',
            'roles': 'roles'
        }

        self._id = id
        self._name = name
        self._localized_name = localized_name
        self._primary_attr = primary_attr
        self._attack_type = attack_type
        self._roles = roles

    @property
    def id(self):
        """
        Gets the id of this InlineResponse2003.
        Numeric identifier for the hero object

        :return: The id of this InlineResponse2003.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse2003.
        Numeric identifier for the hero object

        :param id: The id of this InlineResponse2003.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this InlineResponse2003.
        Dota hero command name, e.g. 'npc_dota_hero_antimage'

        :return: The name of this InlineResponse2003.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse2003.
        Dota hero command name, e.g. 'npc_dota_hero_antimage'

        :param name: The name of this InlineResponse2003.
        :type: str
        """

        self._name = name

    @property
    def localized_name(self):
        """
        Gets the localized_name of this InlineResponse2003.
        Hero name, e.g. 'Anti-Mage'

        :return: The localized_name of this InlineResponse2003.
        :rtype: str
        """
        return self._localized_name

    @localized_name.setter
    def localized_name(self, localized_name):
        """
        Sets the localized_name of this InlineResponse2003.
        Hero name, e.g. 'Anti-Mage'

        :param localized_name: The localized_name of this InlineResponse2003.
        :type: str
        """

        self._localized_name = localized_name

    @property
    def primary_attr(self):
        """
        Gets the primary_attr of this InlineResponse2003.
        Hero primary shorthand attribute name, e.g. 'agi'

        :return: The primary_attr of this InlineResponse2003.
        :rtype: str
        """
        return self._primary_attr

    @primary_attr.setter
    def primary_attr(self, primary_attr):
        """
        Sets the primary_attr of this InlineResponse2003.
        Hero primary shorthand attribute name, e.g. 'agi'

        :param primary_attr: The primary_attr of this InlineResponse2003.
        :type: str
        """

        self._primary_attr = primary_attr

    @property
    def attack_type(self):
        """
        Gets the attack_type of this InlineResponse2003.
        Hero attack type, either 'Melee' or 'Ranged'

        :return: The attack_type of this InlineResponse2003.
        :rtype: str
        """
        return self._attack_type

    @attack_type.setter
    def attack_type(self, attack_type):
        """
        Sets the attack_type of this InlineResponse2003.
        Hero attack type, either 'Melee' or 'Ranged'

        :param attack_type: The attack_type of this InlineResponse2003.
        :type: str
        """

        self._attack_type = attack_type

    @property
    def roles(self):
        """
        Gets the roles of this InlineResponse2003.


        :return: The roles of this InlineResponse2003.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this InlineResponse2003.


        :param roles: The roles of this InlineResponse2003.
        :type: list[str]
        """

        self._roles = roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
