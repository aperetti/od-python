# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2009(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, match_id=None, barracks_status_dire=None, barracks_status_radiant=None, chat=None, cluster=None, cosmetics=None, dire_score=None, draft_timings=None, duration=None, engine=None, first_blood_time=None, game_mode=None, human_players=None, leagueid=None, lobby_type=None, match_seq_num=None, negative_votes=None, objectives=None, picks_bans=None, positive_votes=None, radiant_gold_adv=None, radiant_score=None, radiant_win=None, radiant_xp_adv=None, start_time=None, teamfights=None, tower_status_dire=None, tower_status_radiant=None, version=None, replay_salt=None, series_id=None, series_type=None, radiant_team=None, dire_team=None, league=None, skill=None, players=None, patch=None, region=None, all_word_counts=None, my_word_counts=None, throw=None, comeback=None, loss=None, win=None, replay_url=None):
        """
        InlineResponse2009 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'match_id': 'int',
            'barracks_status_dire': 'int',
            'barracks_status_radiant': 'int',
            'chat': 'list[InlineResponse2009Chat]',
            'cluster': 'int',
            'cosmetics': 'object',
            'dire_score': 'int',
            'draft_timings': 'list[InlineResponse2009DraftTimings]',
            'duration': 'int',
            'engine': 'int',
            'first_blood_time': 'int',
            'game_mode': 'int',
            'human_players': 'int',
            'leagueid': 'int',
            'lobby_type': 'int',
            'match_seq_num': 'int',
            'negative_votes': 'int',
            'objectives': 'object',
            'picks_bans': 'object',
            'positive_votes': 'int',
            'radiant_gold_adv': 'object',
            'radiant_score': 'int',
            'radiant_win': 'bool',
            'radiant_xp_adv': 'object',
            'start_time': 'int',
            'teamfights': 'object',
            'tower_status_dire': 'int',
            'tower_status_radiant': 'int',
            'version': 'int',
            'replay_salt': 'int',
            'series_id': 'int',
            'series_type': 'int',
            'radiant_team': 'object',
            'dire_team': 'object',
            'league': 'object',
            'skill': 'int',
            'players': 'list[InlineResponse2009Players]',
            'patch': 'int',
            'region': 'int',
            'all_word_counts': 'object',
            'my_word_counts': 'object',
            'throw': 'int',
            'comeback': 'int',
            'loss': 'int',
            'win': 'int',
            'replay_url': 'str'
        }

        self.attribute_map = {
            'match_id': 'match_id',
            'barracks_status_dire': 'barracks_status_dire',
            'barracks_status_radiant': 'barracks_status_radiant',
            'chat': 'chat',
            'cluster': 'cluster',
            'cosmetics': 'cosmetics',
            'dire_score': 'dire_score',
            'draft_timings': 'draft_timings',
            'duration': 'duration',
            'engine': 'engine',
            'first_blood_time': 'first_blood_time',
            'game_mode': 'game_mode',
            'human_players': 'human_players',
            'leagueid': 'leagueid',
            'lobby_type': 'lobby_type',
            'match_seq_num': 'match_seq_num',
            'negative_votes': 'negative_votes',
            'objectives': 'objectives',
            'picks_bans': 'picks_bans',
            'positive_votes': 'positive_votes',
            'radiant_gold_adv': 'radiant_gold_adv',
            'radiant_score': 'radiant_score',
            'radiant_win': 'radiant_win',
            'radiant_xp_adv': 'radiant_xp_adv',
            'start_time': 'start_time',
            'teamfights': 'teamfights',
            'tower_status_dire': 'tower_status_dire',
            'tower_status_radiant': 'tower_status_radiant',
            'version': 'version',
            'replay_salt': 'replay_salt',
            'series_id': 'series_id',
            'series_type': 'series_type',
            'radiant_team': 'radiant_team',
            'dire_team': 'dire_team',
            'league': 'league',
            'skill': 'skill',
            'players': 'players',
            'patch': 'patch',
            'region': 'region',
            'all_word_counts': 'all_word_counts',
            'my_word_counts': 'my_word_counts',
            'throw': 'throw',
            'comeback': 'comeback',
            'loss': 'loss',
            'win': 'win',
            'replay_url': 'replay_url'
        }

        self._match_id = match_id
        self._barracks_status_dire = barracks_status_dire
        self._barracks_status_radiant = barracks_status_radiant
        self._chat = chat
        self._cluster = cluster
        self._cosmetics = cosmetics
        self._dire_score = dire_score
        self._draft_timings = draft_timings
        self._duration = duration
        self._engine = engine
        self._first_blood_time = first_blood_time
        self._game_mode = game_mode
        self._human_players = human_players
        self._leagueid = leagueid
        self._lobby_type = lobby_type
        self._match_seq_num = match_seq_num
        self._negative_votes = negative_votes
        self._objectives = objectives
        self._picks_bans = picks_bans
        self._positive_votes = positive_votes
        self._radiant_gold_adv = radiant_gold_adv
        self._radiant_score = radiant_score
        self._radiant_win = radiant_win
        self._radiant_xp_adv = radiant_xp_adv
        self._start_time = start_time
        self._teamfights = teamfights
        self._tower_status_dire = tower_status_dire
        self._tower_status_radiant = tower_status_radiant
        self._version = version
        self._replay_salt = replay_salt
        self._series_id = series_id
        self._series_type = series_type
        self._radiant_team = radiant_team
        self._dire_team = dire_team
        self._league = league
        self._skill = skill
        self._players = players
        self._patch = patch
        self._region = region
        self._all_word_counts = all_word_counts
        self._my_word_counts = my_word_counts
        self._throw = throw
        self._comeback = comeback
        self._loss = loss
        self._win = win
        self._replay_url = replay_url

    @property
    def match_id(self):
        """
        Gets the match_id of this InlineResponse2009.
        The ID number of the match assigned by Valve

        :return: The match_id of this InlineResponse2009.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """
        Sets the match_id of this InlineResponse2009.
        The ID number of the match assigned by Valve

        :param match_id: The match_id of this InlineResponse2009.
        :type: int
        """

        self._match_id = match_id

    @property
    def barracks_status_dire(self):
        """
        Gets the barracks_status_dire of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.

        :return: The barracks_status_dire of this InlineResponse2009.
        :rtype: int
        """
        return self._barracks_status_dire

    @barracks_status_dire.setter
    def barracks_status_dire(self, barracks_status_dire):
        """
        Sets the barracks_status_dire of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.

        :param barracks_status_dire: The barracks_status_dire of this InlineResponse2009.
        :type: int
        """

        self._barracks_status_dire = barracks_status_dire

    @property
    def barracks_status_radiant(self):
        """
        Gets the barracks_status_radiant of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.

        :return: The barracks_status_radiant of this InlineResponse2009.
        :rtype: int
        """
        return self._barracks_status_radiant

    @barracks_status_radiant.setter
    def barracks_status_radiant(self, barracks_status_radiant):
        """
        Sets the barracks_status_radiant of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.

        :param barracks_status_radiant: The barracks_status_radiant of this InlineResponse2009.
        :type: int
        """

        self._barracks_status_radiant = barracks_status_radiant

    @property
    def chat(self):
        """
        Gets the chat of this InlineResponse2009.
        Array containing information on the chat of the game

        :return: The chat of this InlineResponse2009.
        :rtype: list[InlineResponse2009Chat]
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """
        Sets the chat of this InlineResponse2009.
        Array containing information on the chat of the game

        :param chat: The chat of this InlineResponse2009.
        :type: list[InlineResponse2009Chat]
        """

        self._chat = chat

    @property
    def cluster(self):
        """
        Gets the cluster of this InlineResponse2009.
        cluster

        :return: The cluster of this InlineResponse2009.
        :rtype: int
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this InlineResponse2009.
        cluster

        :param cluster: The cluster of this InlineResponse2009.
        :type: int
        """

        self._cluster = cluster

    @property
    def cosmetics(self):
        """
        Gets the cosmetics of this InlineResponse2009.
        cosmetics

        :return: The cosmetics of this InlineResponse2009.
        :rtype: object
        """
        return self._cosmetics

    @cosmetics.setter
    def cosmetics(self, cosmetics):
        """
        Sets the cosmetics of this InlineResponse2009.
        cosmetics

        :param cosmetics: The cosmetics of this InlineResponse2009.
        :type: object
        """

        self._cosmetics = cosmetics

    @property
    def dire_score(self):
        """
        Gets the dire_score of this InlineResponse2009.
        Final score for Dire (number of kills on Radiant)

        :return: The dire_score of this InlineResponse2009.
        :rtype: int
        """
        return self._dire_score

    @dire_score.setter
    def dire_score(self, dire_score):
        """
        Sets the dire_score of this InlineResponse2009.
        Final score for Dire (number of kills on Radiant)

        :param dire_score: The dire_score of this InlineResponse2009.
        :type: int
        """

        self._dire_score = dire_score

    @property
    def draft_timings(self):
        """
        Gets the draft_timings of this InlineResponse2009.
        draft_timings

        :return: The draft_timings of this InlineResponse2009.
        :rtype: list[InlineResponse2009DraftTimings]
        """
        return self._draft_timings

    @draft_timings.setter
    def draft_timings(self, draft_timings):
        """
        Sets the draft_timings of this InlineResponse2009.
        draft_timings

        :param draft_timings: The draft_timings of this InlineResponse2009.
        :type: list[InlineResponse2009DraftTimings]
        """

        self._draft_timings = draft_timings

    @property
    def duration(self):
        """
        Gets the duration of this InlineResponse2009.
        Duration of the game in seconds

        :return: The duration of this InlineResponse2009.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this InlineResponse2009.
        Duration of the game in seconds

        :param duration: The duration of this InlineResponse2009.
        :type: int
        """

        self._duration = duration

    @property
    def engine(self):
        """
        Gets the engine of this InlineResponse2009.
        engine

        :return: The engine of this InlineResponse2009.
        :rtype: int
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """
        Sets the engine of this InlineResponse2009.
        engine

        :param engine: The engine of this InlineResponse2009.
        :type: int
        """

        self._engine = engine

    @property
    def first_blood_time(self):
        """
        Gets the first_blood_time of this InlineResponse2009.
        Time in seconds at which first blood occurred

        :return: The first_blood_time of this InlineResponse2009.
        :rtype: int
        """
        return self._first_blood_time

    @first_blood_time.setter
    def first_blood_time(self, first_blood_time):
        """
        Sets the first_blood_time of this InlineResponse2009.
        Time in seconds at which first blood occurred

        :param first_blood_time: The first_blood_time of this InlineResponse2009.
        :type: int
        """

        self._first_blood_time = first_blood_time

    @property
    def game_mode(self):
        """
        Gets the game_mode of this InlineResponse2009.
        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json

        :return: The game_mode of this InlineResponse2009.
        :rtype: int
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """
        Sets the game_mode of this InlineResponse2009.
        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json

        :param game_mode: The game_mode of this InlineResponse2009.
        :type: int
        """

        self._game_mode = game_mode

    @property
    def human_players(self):
        """
        Gets the human_players of this InlineResponse2009.
        Number of human players in the game

        :return: The human_players of this InlineResponse2009.
        :rtype: int
        """
        return self._human_players

    @human_players.setter
    def human_players(self, human_players):
        """
        Sets the human_players of this InlineResponse2009.
        Number of human players in the game

        :param human_players: The human_players of this InlineResponse2009.
        :type: int
        """

        self._human_players = human_players

    @property
    def leagueid(self):
        """
        Gets the leagueid of this InlineResponse2009.
        leagueid

        :return: The leagueid of this InlineResponse2009.
        :rtype: int
        """
        return self._leagueid

    @leagueid.setter
    def leagueid(self, leagueid):
        """
        Sets the leagueid of this InlineResponse2009.
        leagueid

        :param leagueid: The leagueid of this InlineResponse2009.
        :type: int
        """

        self._leagueid = leagueid

    @property
    def lobby_type(self):
        """
        Gets the lobby_type of this InlineResponse2009.
        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json

        :return: The lobby_type of this InlineResponse2009.
        :rtype: int
        """
        return self._lobby_type

    @lobby_type.setter
    def lobby_type(self, lobby_type):
        """
        Sets the lobby_type of this InlineResponse2009.
        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json

        :param lobby_type: The lobby_type of this InlineResponse2009.
        :type: int
        """

        self._lobby_type = lobby_type

    @property
    def match_seq_num(self):
        """
        Gets the match_seq_num of this InlineResponse2009.
        match_seq_num

        :return: The match_seq_num of this InlineResponse2009.
        :rtype: int
        """
        return self._match_seq_num

    @match_seq_num.setter
    def match_seq_num(self, match_seq_num):
        """
        Sets the match_seq_num of this InlineResponse2009.
        match_seq_num

        :param match_seq_num: The match_seq_num of this InlineResponse2009.
        :type: int
        """

        self._match_seq_num = match_seq_num

    @property
    def negative_votes(self):
        """
        Gets the negative_votes of this InlineResponse2009.
        Number of negative votes the replay received in the in-game client

        :return: The negative_votes of this InlineResponse2009.
        :rtype: int
        """
        return self._negative_votes

    @negative_votes.setter
    def negative_votes(self, negative_votes):
        """
        Sets the negative_votes of this InlineResponse2009.
        Number of negative votes the replay received in the in-game client

        :param negative_votes: The negative_votes of this InlineResponse2009.
        :type: int
        """

        self._negative_votes = negative_votes

    @property
    def objectives(self):
        """
        Gets the objectives of this InlineResponse2009.
        objectives

        :return: The objectives of this InlineResponse2009.
        :rtype: object
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """
        Sets the objectives of this InlineResponse2009.
        objectives

        :param objectives: The objectives of this InlineResponse2009.
        :type: object
        """

        self._objectives = objectives

    @property
    def picks_bans(self):
        """
        Gets the picks_bans of this InlineResponse2009.
        Object containing information on the draft. Each pick/ban contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order.

        :return: The picks_bans of this InlineResponse2009.
        :rtype: object
        """
        return self._picks_bans

    @picks_bans.setter
    def picks_bans(self, picks_bans):
        """
        Sets the picks_bans of this InlineResponse2009.
        Object containing information on the draft. Each pick/ban contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order.

        :param picks_bans: The picks_bans of this InlineResponse2009.
        :type: object
        """

        self._picks_bans = picks_bans

    @property
    def positive_votes(self):
        """
        Gets the positive_votes of this InlineResponse2009.
        Number of positive votes the replay received in the in-game client

        :return: The positive_votes of this InlineResponse2009.
        :rtype: int
        """
        return self._positive_votes

    @positive_votes.setter
    def positive_votes(self, positive_votes):
        """
        Sets the positive_votes of this InlineResponse2009.
        Number of positive votes the replay received in the in-game client

        :param positive_votes: The positive_votes of this InlineResponse2009.
        :type: int
        """

        self._positive_votes = positive_votes

    @property
    def radiant_gold_adv(self):
        """
        Gets the radiant_gold_adv of this InlineResponse2009.
        Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. 

        :return: The radiant_gold_adv of this InlineResponse2009.
        :rtype: object
        """
        return self._radiant_gold_adv

    @radiant_gold_adv.setter
    def radiant_gold_adv(self, radiant_gold_adv):
        """
        Sets the radiant_gold_adv of this InlineResponse2009.
        Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. 

        :param radiant_gold_adv: The radiant_gold_adv of this InlineResponse2009.
        :type: object
        """

        self._radiant_gold_adv = radiant_gold_adv

    @property
    def radiant_score(self):
        """
        Gets the radiant_score of this InlineResponse2009.
        Final score for Radiant (number of kills on Radiant)

        :return: The radiant_score of this InlineResponse2009.
        :rtype: int
        """
        return self._radiant_score

    @radiant_score.setter
    def radiant_score(self, radiant_score):
        """
        Sets the radiant_score of this InlineResponse2009.
        Final score for Radiant (number of kills on Radiant)

        :param radiant_score: The radiant_score of this InlineResponse2009.
        :type: int
        """

        self._radiant_score = radiant_score

    @property
    def radiant_win(self):
        """
        Gets the radiant_win of this InlineResponse2009.
        Boolean indicating whether Radiant won the match

        :return: The radiant_win of this InlineResponse2009.
        :rtype: bool
        """
        return self._radiant_win

    @radiant_win.setter
    def radiant_win(self, radiant_win):
        """
        Sets the radiant_win of this InlineResponse2009.
        Boolean indicating whether Radiant won the match

        :param radiant_win: The radiant_win of this InlineResponse2009.
        :type: bool
        """

        self._radiant_win = radiant_win

    @property
    def radiant_xp_adv(self):
        """
        Gets the radiant_xp_adv of this InlineResponse2009.
        Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. 

        :return: The radiant_xp_adv of this InlineResponse2009.
        :rtype: object
        """
        return self._radiant_xp_adv

    @radiant_xp_adv.setter
    def radiant_xp_adv(self, radiant_xp_adv):
        """
        Sets the radiant_xp_adv of this InlineResponse2009.
        Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. 

        :param radiant_xp_adv: The radiant_xp_adv of this InlineResponse2009.
        :type: object
        """

        self._radiant_xp_adv = radiant_xp_adv

    @property
    def start_time(self):
        """
        Gets the start_time of this InlineResponse2009.
        The Unix timestamp at which the game started

        :return: The start_time of this InlineResponse2009.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this InlineResponse2009.
        The Unix timestamp at which the game started

        :param start_time: The start_time of this InlineResponse2009.
        :type: int
        """

        self._start_time = start_time

    @property
    def teamfights(self):
        """
        Gets the teamfights of this InlineResponse2009.
        teamfights

        :return: The teamfights of this InlineResponse2009.
        :rtype: object
        """
        return self._teamfights

    @teamfights.setter
    def teamfights(self, teamfights):
        """
        Sets the teamfights of this InlineResponse2009.
        teamfights

        :param teamfights: The teamfights of this InlineResponse2009.
        :type: object
        """

        self._teamfights = teamfights

    @property
    def tower_status_dire(self):
        """
        Gets the tower_status_dire of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which Dire towers are still standing.

        :return: The tower_status_dire of this InlineResponse2009.
        :rtype: int
        """
        return self._tower_status_dire

    @tower_status_dire.setter
    def tower_status_dire(self, tower_status_dire):
        """
        Sets the tower_status_dire of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which Dire towers are still standing.

        :param tower_status_dire: The tower_status_dire of this InlineResponse2009.
        :type: int
        """

        self._tower_status_dire = tower_status_dire

    @property
    def tower_status_radiant(self):
        """
        Gets the tower_status_radiant of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which Radiant towers are still standing.

        :return: The tower_status_radiant of this InlineResponse2009.
        :rtype: int
        """
        return self._tower_status_radiant

    @tower_status_radiant.setter
    def tower_status_radiant(self, tower_status_radiant):
        """
        Sets the tower_status_radiant of this InlineResponse2009.
        Bitmask. An integer that represents a binary of which Radiant towers are still standing.

        :param tower_status_radiant: The tower_status_radiant of this InlineResponse2009.
        :type: int
        """

        self._tower_status_radiant = tower_status_radiant

    @property
    def version(self):
        """
        Gets the version of this InlineResponse2009.
        Parse version, used internally by OpenDota

        :return: The version of this InlineResponse2009.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this InlineResponse2009.
        Parse version, used internally by OpenDota

        :param version: The version of this InlineResponse2009.
        :type: int
        """

        self._version = version

    @property
    def replay_salt(self):
        """
        Gets the replay_salt of this InlineResponse2009.
        replay_salt

        :return: The replay_salt of this InlineResponse2009.
        :rtype: int
        """
        return self._replay_salt

    @replay_salt.setter
    def replay_salt(self, replay_salt):
        """
        Sets the replay_salt of this InlineResponse2009.
        replay_salt

        :param replay_salt: The replay_salt of this InlineResponse2009.
        :type: int
        """

        self._replay_salt = replay_salt

    @property
    def series_id(self):
        """
        Gets the series_id of this InlineResponse2009.
        series_id

        :return: The series_id of this InlineResponse2009.
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """
        Sets the series_id of this InlineResponse2009.
        series_id

        :param series_id: The series_id of this InlineResponse2009.
        :type: int
        """

        self._series_id = series_id

    @property
    def series_type(self):
        """
        Gets the series_type of this InlineResponse2009.
        series_type

        :return: The series_type of this InlineResponse2009.
        :rtype: int
        """
        return self._series_type

    @series_type.setter
    def series_type(self, series_type):
        """
        Sets the series_type of this InlineResponse2009.
        series_type

        :param series_type: The series_type of this InlineResponse2009.
        :type: int
        """

        self._series_type = series_type

    @property
    def radiant_team(self):
        """
        Gets the radiant_team of this InlineResponse2009.
        radiant_team

        :return: The radiant_team of this InlineResponse2009.
        :rtype: object
        """
        return self._radiant_team

    @radiant_team.setter
    def radiant_team(self, radiant_team):
        """
        Sets the radiant_team of this InlineResponse2009.
        radiant_team

        :param radiant_team: The radiant_team of this InlineResponse2009.
        :type: object
        """

        self._radiant_team = radiant_team

    @property
    def dire_team(self):
        """
        Gets the dire_team of this InlineResponse2009.
        dire_team

        :return: The dire_team of this InlineResponse2009.
        :rtype: object
        """
        return self._dire_team

    @dire_team.setter
    def dire_team(self, dire_team):
        """
        Sets the dire_team of this InlineResponse2009.
        dire_team

        :param dire_team: The dire_team of this InlineResponse2009.
        :type: object
        """

        self._dire_team = dire_team

    @property
    def league(self):
        """
        Gets the league of this InlineResponse2009.
        league

        :return: The league of this InlineResponse2009.
        :rtype: object
        """
        return self._league

    @league.setter
    def league(self, league):
        """
        Sets the league of this InlineResponse2009.
        league

        :param league: The league of this InlineResponse2009.
        :type: object
        """

        self._league = league

    @property
    def skill(self):
        """
        Gets the skill of this InlineResponse2009.
        Skill bracket assigned by Valve (Normal, High, Very High)

        :return: The skill of this InlineResponse2009.
        :rtype: int
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """
        Sets the skill of this InlineResponse2009.
        Skill bracket assigned by Valve (Normal, High, Very High)

        :param skill: The skill of this InlineResponse2009.
        :type: int
        """

        self._skill = skill

    @property
    def players(self):
        """
        Gets the players of this InlineResponse2009.
        Array of information on individual players

        :return: The players of this InlineResponse2009.
        :rtype: list[InlineResponse2009Players]
        """
        return self._players

    @players.setter
    def players(self, players):
        """
        Sets the players of this InlineResponse2009.
        Array of information on individual players

        :param players: The players of this InlineResponse2009.
        :type: list[InlineResponse2009Players]
        """

        self._players = players

    @property
    def patch(self):
        """
        Gets the patch of this InlineResponse2009.
        Information on the patch version the game is played on

        :return: The patch of this InlineResponse2009.
        :rtype: int
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """
        Sets the patch of this InlineResponse2009.
        Information on the patch version the game is played on

        :param patch: The patch of this InlineResponse2009.
        :type: int
        """

        self._patch = patch

    @property
    def region(self):
        """
        Gets the region of this InlineResponse2009.
        Integer corresponding to the region the game was played on

        :return: The region of this InlineResponse2009.
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this InlineResponse2009.
        Integer corresponding to the region the game was played on

        :param region: The region of this InlineResponse2009.
        :type: int
        """

        self._region = region

    @property
    def all_word_counts(self):
        """
        Gets the all_word_counts of this InlineResponse2009.
        Word counts of the all chat messages in the player's games

        :return: The all_word_counts of this InlineResponse2009.
        :rtype: object
        """
        return self._all_word_counts

    @all_word_counts.setter
    def all_word_counts(self, all_word_counts):
        """
        Sets the all_word_counts of this InlineResponse2009.
        Word counts of the all chat messages in the player's games

        :param all_word_counts: The all_word_counts of this InlineResponse2009.
        :type: object
        """

        self._all_word_counts = all_word_counts

    @property
    def my_word_counts(self):
        """
        Gets the my_word_counts of this InlineResponse2009.
        Word counts of the player's all chat messages

        :return: The my_word_counts of this InlineResponse2009.
        :rtype: object
        """
        return self._my_word_counts

    @my_word_counts.setter
    def my_word_counts(self, my_word_counts):
        """
        Sets the my_word_counts of this InlineResponse2009.
        Word counts of the player's all chat messages

        :param my_word_counts: The my_word_counts of this InlineResponse2009.
        :type: object
        """

        self._my_word_counts = my_word_counts

    @property
    def throw(self):
        """
        Gets the throw of this InlineResponse2009.
        Maximum gold advantage of the player's team if they lost the match

        :return: The throw of this InlineResponse2009.
        :rtype: int
        """
        return self._throw

    @throw.setter
    def throw(self, throw):
        """
        Sets the throw of this InlineResponse2009.
        Maximum gold advantage of the player's team if they lost the match

        :param throw: The throw of this InlineResponse2009.
        :type: int
        """

        self._throw = throw

    @property
    def comeback(self):
        """
        Gets the comeback of this InlineResponse2009.
        Maximum gold disadvantage of the player's team if they won the match

        :return: The comeback of this InlineResponse2009.
        :rtype: int
        """
        return self._comeback

    @comeback.setter
    def comeback(self, comeback):
        """
        Sets the comeback of this InlineResponse2009.
        Maximum gold disadvantage of the player's team if they won the match

        :param comeback: The comeback of this InlineResponse2009.
        :type: int
        """

        self._comeback = comeback

    @property
    def loss(self):
        """
        Gets the loss of this InlineResponse2009.
        Maximum gold disadvantage of the player's team if they lost the match

        :return: The loss of this InlineResponse2009.
        :rtype: int
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """
        Sets the loss of this InlineResponse2009.
        Maximum gold disadvantage of the player's team if they lost the match

        :param loss: The loss of this InlineResponse2009.
        :type: int
        """

        self._loss = loss

    @property
    def win(self):
        """
        Gets the win of this InlineResponse2009.
        Maximum gold advantage of the player's team if they won the match

        :return: The win of this InlineResponse2009.
        :rtype: int
        """
        return self._win

    @win.setter
    def win(self, win):
        """
        Sets the win of this InlineResponse2009.
        Maximum gold advantage of the player's team if they won the match

        :param win: The win of this InlineResponse2009.
        :type: int
        """

        self._win = win

    @property
    def replay_url(self):
        """
        Gets the replay_url of this InlineResponse2009.
        replay_url

        :return: The replay_url of this InlineResponse2009.
        :rtype: str
        """
        return self._replay_url

    @replay_url.setter
    def replay_url(self, replay_url):
        """
        Sets the replay_url of this InlineResponse2009.
        replay_url

        :param replay_url: The replay_url of this InlineResponse2009.
        :type: str
        """

        self._replay_url = replay_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
