# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20035(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, team_id=None, rating=None, wins=None, losses=None, last_match_time=None, name=None, tag=None):
        """
        InlineResponse20035 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'team_id': 'int',
            'rating': 'float',
            'wins': 'int',
            'losses': 'int',
            'last_match_time': 'int',
            'name': 'str',
            'tag': 'str'
        }

        self.attribute_map = {
            'team_id': 'team_id',
            'rating': 'rating',
            'wins': 'wins',
            'losses': 'losses',
            'last_match_time': 'last_match_time',
            'name': 'name',
            'tag': 'tag'
        }

        self._team_id = team_id
        self._rating = rating
        self._wins = wins
        self._losses = losses
        self._last_match_time = last_match_time
        self._name = name
        self._tag = tag

    @property
    def team_id(self):
        """
        Gets the team_id of this InlineResponse20035.
        Team's identifier

        :return: The team_id of this InlineResponse20035.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this InlineResponse20035.
        Team's identifier

        :param team_id: The team_id of this InlineResponse20035.
        :type: int
        """

        self._team_id = team_id

    @property
    def rating(self):
        """
        Gets the rating of this InlineResponse20035.
        The Elo rating of the team

        :return: The rating of this InlineResponse20035.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """
        Sets the rating of this InlineResponse20035.
        The Elo rating of the team

        :param rating: The rating of this InlineResponse20035.
        :type: float
        """

        self._rating = rating

    @property
    def wins(self):
        """
        Gets the wins of this InlineResponse20035.
        The number of games won by this team

        :return: The wins of this InlineResponse20035.
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """
        Sets the wins of this InlineResponse20035.
        The number of games won by this team

        :param wins: The wins of this InlineResponse20035.
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """
        Gets the losses of this InlineResponse20035.
        The number of losses by this team

        :return: The losses of this InlineResponse20035.
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """
        Sets the losses of this InlineResponse20035.
        The number of losses by this team

        :param losses: The losses of this InlineResponse20035.
        :type: int
        """

        self._losses = losses

    @property
    def last_match_time(self):
        """
        Gets the last_match_time of this InlineResponse20035.
        The Unix timestamp of the last match played by this team

        :return: The last_match_time of this InlineResponse20035.
        :rtype: int
        """
        return self._last_match_time

    @last_match_time.setter
    def last_match_time(self, last_match_time):
        """
        Sets the last_match_time of this InlineResponse20035.
        The Unix timestamp of the last match played by this team

        :param last_match_time: The last_match_time of this InlineResponse20035.
        :type: int
        """

        self._last_match_time = last_match_time

    @property
    def name(self):
        """
        Gets the name of this InlineResponse20035.
        Team name, eg. 'Newbee'

        :return: The name of this InlineResponse20035.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse20035.
        Team name, eg. 'Newbee'

        :param name: The name of this InlineResponse20035.
        :type: str
        """

        self._name = name

    @property
    def tag(self):
        """
        Gets the tag of this InlineResponse20035.
        The team tag/abbreviation

        :return: The tag of this InlineResponse20035.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this InlineResponse20035.
        The team tag/abbreviation

        :param tag: The tag of this InlineResponse20035.
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
