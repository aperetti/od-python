# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse2001RanksFields(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, table_id=None, column_id=None, data_type_id=None, data_type_size=None, data_type_modifier=None, format=None):
        """
        InlineResponse2001RanksFields - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'table_id': 'int',
            'column_id': 'int',
            'data_type_id': 'int',
            'data_type_size': 'int',
            'data_type_modifier': 'str',
            'format': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'table_id': 'tableID',
            'column_id': 'columnID',
            'data_type_id': 'dataTypeID',
            'data_type_size': 'dataTypeSize',
            'data_type_modifier': 'dataTypeModifier',
            'format': 'format'
        }

        self._name = name
        self._table_id = table_id
        self._column_id = column_id
        self._data_type_id = data_type_id
        self._data_type_size = data_type_size
        self._data_type_modifier = data_type_modifier
        self._format = format

    @property
    def name(self):
        """
        Gets the name of this InlineResponse2001RanksFields.
        name

        :return: The name of this InlineResponse2001RanksFields.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse2001RanksFields.
        name

        :param name: The name of this InlineResponse2001RanksFields.
        :type: str
        """

        self._name = name

    @property
    def table_id(self):
        """
        Gets the table_id of this InlineResponse2001RanksFields.
        tableID

        :return: The table_id of this InlineResponse2001RanksFields.
        :rtype: int
        """
        return self._table_id

    @table_id.setter
    def table_id(self, table_id):
        """
        Sets the table_id of this InlineResponse2001RanksFields.
        tableID

        :param table_id: The table_id of this InlineResponse2001RanksFields.
        :type: int
        """

        self._table_id = table_id

    @property
    def column_id(self):
        """
        Gets the column_id of this InlineResponse2001RanksFields.
        columnID

        :return: The column_id of this InlineResponse2001RanksFields.
        :rtype: int
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """
        Sets the column_id of this InlineResponse2001RanksFields.
        columnID

        :param column_id: The column_id of this InlineResponse2001RanksFields.
        :type: int
        """

        self._column_id = column_id

    @property
    def data_type_id(self):
        """
        Gets the data_type_id of this InlineResponse2001RanksFields.
        dataTypeID

        :return: The data_type_id of this InlineResponse2001RanksFields.
        :rtype: int
        """
        return self._data_type_id

    @data_type_id.setter
    def data_type_id(self, data_type_id):
        """
        Sets the data_type_id of this InlineResponse2001RanksFields.
        dataTypeID

        :param data_type_id: The data_type_id of this InlineResponse2001RanksFields.
        :type: int
        """

        self._data_type_id = data_type_id

    @property
    def data_type_size(self):
        """
        Gets the data_type_size of this InlineResponse2001RanksFields.
        dataTypeSize

        :return: The data_type_size of this InlineResponse2001RanksFields.
        :rtype: int
        """
        return self._data_type_size

    @data_type_size.setter
    def data_type_size(self, data_type_size):
        """
        Sets the data_type_size of this InlineResponse2001RanksFields.
        dataTypeSize

        :param data_type_size: The data_type_size of this InlineResponse2001RanksFields.
        :type: int
        """

        self._data_type_size = data_type_size

    @property
    def data_type_modifier(self):
        """
        Gets the data_type_modifier of this InlineResponse2001RanksFields.
        dataTypeModifier

        :return: The data_type_modifier of this InlineResponse2001RanksFields.
        :rtype: str
        """
        return self._data_type_modifier

    @data_type_modifier.setter
    def data_type_modifier(self, data_type_modifier):
        """
        Sets the data_type_modifier of this InlineResponse2001RanksFields.
        dataTypeModifier

        :param data_type_modifier: The data_type_modifier of this InlineResponse2001RanksFields.
        :type: str
        """

        self._data_type_modifier = data_type_modifier

    @property
    def format(self):
        """
        Gets the format of this InlineResponse2001RanksFields.
        format

        :return: The format of this InlineResponse2001RanksFields.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this InlineResponse2001RanksFields.
        format

        :param format: The format of this InlineResponse2001RanksFields.
        :type: str
        """

        self._format = format

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
