# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InlineResponse20025(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, steamid=None, avatar=None, avatarmedium=None, avatarfull=None, profileurl=None, personaname=None, cheese=None, fh_unavailable=None, loccountrycode=None, name=None, country_code=None, fantasy_role=None, team_id=None, team_name=None, team_tag=None, is_locked=None, is_pro=None, locked_until=None):
        """
        InlineResponse20025 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'int',
            'steamid': 'str',
            'avatar': 'str',
            'avatarmedium': 'str',
            'avatarfull': 'str',
            'profileurl': 'str',
            'personaname': 'str',
            'cheese': 'int',
            'fh_unavailable': 'bool',
            'loccountrycode': 'str',
            'name': 'str',
            'country_code': 'str',
            'fantasy_role': 'int',
            'team_id': 'int',
            'team_name': 'str',
            'team_tag': 'str',
            'is_locked': 'bool',
            'is_pro': 'bool',
            'locked_until': 'int'
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'steamid': 'steamid',
            'avatar': 'avatar',
            'avatarmedium': 'avatarmedium',
            'avatarfull': 'avatarfull',
            'profileurl': 'profileurl',
            'personaname': 'personaname',
            'cheese': 'cheese',
            'fh_unavailable': 'fh_unavailable',
            'loccountrycode': 'loccountrycode',
            'name': 'name',
            'country_code': 'country_code',
            'fantasy_role': 'fantasy_role',
            'team_id': 'team_id',
            'team_name': 'team_name',
            'team_tag': 'team_tag',
            'is_locked': 'is_locked',
            'is_pro': 'is_pro',
            'locked_until': 'locked_until'
        }

        self._account_id = account_id
        self._steamid = steamid
        self._avatar = avatar
        self._avatarmedium = avatarmedium
        self._avatarfull = avatarfull
        self._profileurl = profileurl
        self._personaname = personaname
        self._cheese = cheese
        self._fh_unavailable = fh_unavailable
        self._loccountrycode = loccountrycode
        self._name = name
        self._country_code = country_code
        self._fantasy_role = fantasy_role
        self._team_id = team_id
        self._team_name = team_name
        self._team_tag = team_tag
        self._is_locked = is_locked
        self._is_pro = is_pro
        self._locked_until = locked_until

    @property
    def account_id(self):
        """
        Gets the account_id of this InlineResponse20025.
        Player's account identifier

        :return: The account_id of this InlineResponse20025.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this InlineResponse20025.
        Player's account identifier

        :param account_id: The account_id of this InlineResponse20025.
        :type: int
        """

        self._account_id = account_id

    @property
    def steamid(self):
        """
        Gets the steamid of this InlineResponse20025.
        Player's steam identifier

        :return: The steamid of this InlineResponse20025.
        :rtype: str
        """
        return self._steamid

    @steamid.setter
    def steamid(self, steamid):
        """
        Sets the steamid of this InlineResponse20025.
        Player's steam identifier

        :param steamid: The steamid of this InlineResponse20025.
        :type: str
        """

        self._steamid = steamid

    @property
    def avatar(self):
        """
        Gets the avatar of this InlineResponse20025.
        Steam picture URL (small picture)

        :return: The avatar of this InlineResponse20025.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this InlineResponse20025.
        Steam picture URL (small picture)

        :param avatar: The avatar of this InlineResponse20025.
        :type: str
        """

        self._avatar = avatar

    @property
    def avatarmedium(self):
        """
        Gets the avatarmedium of this InlineResponse20025.
        Steam picture URL (medium picture)

        :return: The avatarmedium of this InlineResponse20025.
        :rtype: str
        """
        return self._avatarmedium

    @avatarmedium.setter
    def avatarmedium(self, avatarmedium):
        """
        Sets the avatarmedium of this InlineResponse20025.
        Steam picture URL (medium picture)

        :param avatarmedium: The avatarmedium of this InlineResponse20025.
        :type: str
        """

        self._avatarmedium = avatarmedium

    @property
    def avatarfull(self):
        """
        Gets the avatarfull of this InlineResponse20025.
        Steam picture URL (full picture)

        :return: The avatarfull of this InlineResponse20025.
        :rtype: str
        """
        return self._avatarfull

    @avatarfull.setter
    def avatarfull(self, avatarfull):
        """
        Sets the avatarfull of this InlineResponse20025.
        Steam picture URL (full picture)

        :param avatarfull: The avatarfull of this InlineResponse20025.
        :type: str
        """

        self._avatarfull = avatarfull

    @property
    def profileurl(self):
        """
        Gets the profileurl of this InlineResponse20025.
        Steam profile URL

        :return: The profileurl of this InlineResponse20025.
        :rtype: str
        """
        return self._profileurl

    @profileurl.setter
    def profileurl(self, profileurl):
        """
        Sets the profileurl of this InlineResponse20025.
        Steam profile URL

        :param profileurl: The profileurl of this InlineResponse20025.
        :type: str
        """

        self._profileurl = profileurl

    @property
    def personaname(self):
        """
        Gets the personaname of this InlineResponse20025.
        Player's Steam name

        :return: The personaname of this InlineResponse20025.
        :rtype: str
        """
        return self._personaname

    @personaname.setter
    def personaname(self, personaname):
        """
        Sets the personaname of this InlineResponse20025.
        Player's Steam name

        :param personaname: The personaname of this InlineResponse20025.
        :type: str
        """

        self._personaname = personaname

    @property
    def cheese(self):
        """
        Gets the cheese of this InlineResponse20025.
        Amount of dollars the player has donated to OpenDota

        :return: The cheese of this InlineResponse20025.
        :rtype: int
        """
        return self._cheese

    @cheese.setter
    def cheese(self, cheese):
        """
        Sets the cheese of this InlineResponse20025.
        Amount of dollars the player has donated to OpenDota

        :param cheese: The cheese of this InlineResponse20025.
        :type: int
        """

        self._cheese = cheese

    @property
    def fh_unavailable(self):
        """
        Gets the fh_unavailable of this InlineResponse20025.
        Whether the refresh of player' match history failed

        :return: The fh_unavailable of this InlineResponse20025.
        :rtype: bool
        """
        return self._fh_unavailable

    @fh_unavailable.setter
    def fh_unavailable(self, fh_unavailable):
        """
        Sets the fh_unavailable of this InlineResponse20025.
        Whether the refresh of player' match history failed

        :param fh_unavailable: The fh_unavailable of this InlineResponse20025.
        :type: bool
        """

        self._fh_unavailable = fh_unavailable

    @property
    def loccountrycode(self):
        """
        Gets the loccountrycode of this InlineResponse20025.
        Player's country identifier, e.g. US

        :return: The loccountrycode of this InlineResponse20025.
        :rtype: str
        """
        return self._loccountrycode

    @loccountrycode.setter
    def loccountrycode(self, loccountrycode):
        """
        Sets the loccountrycode of this InlineResponse20025.
        Player's country identifier, e.g. US

        :param loccountrycode: The loccountrycode of this InlineResponse20025.
        :type: str
        """

        self._loccountrycode = loccountrycode

    @property
    def name(self):
        """
        Gets the name of this InlineResponse20025.
        Verified player name, e.g. 'Miracle-'

        :return: The name of this InlineResponse20025.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse20025.
        Verified player name, e.g. 'Miracle-'

        :param name: The name of this InlineResponse20025.
        :type: str
        """

        self._name = name

    @property
    def country_code(self):
        """
        Gets the country_code of this InlineResponse20025.
        Player's country code

        :return: The country_code of this InlineResponse20025.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this InlineResponse20025.
        Player's country code

        :param country_code: The country_code of this InlineResponse20025.
        :type: str
        """

        self._country_code = country_code

    @property
    def fantasy_role(self):
        """
        Gets the fantasy_role of this InlineResponse20025.
        Player's ingame role (core: 1 or support: 2)

        :return: The fantasy_role of this InlineResponse20025.
        :rtype: int
        """
        return self._fantasy_role

    @fantasy_role.setter
    def fantasy_role(self, fantasy_role):
        """
        Sets the fantasy_role of this InlineResponse20025.
        Player's ingame role (core: 1 or support: 2)

        :param fantasy_role: The fantasy_role of this InlineResponse20025.
        :type: int
        """

        self._fantasy_role = fantasy_role

    @property
    def team_id(self):
        """
        Gets the team_id of this InlineResponse20025.
        Player's team identifier

        :return: The team_id of this InlineResponse20025.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this InlineResponse20025.
        Player's team identifier

        :param team_id: The team_id of this InlineResponse20025.
        :type: int
        """

        self._team_id = team_id

    @property
    def team_name(self):
        """
        Gets the team_name of this InlineResponse20025.
        Player's team name, e.g. 'Evil Geniuses'

        :return: The team_name of this InlineResponse20025.
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """
        Sets the team_name of this InlineResponse20025.
        Player's team name, e.g. 'Evil Geniuses'

        :param team_name: The team_name of this InlineResponse20025.
        :type: str
        """

        self._team_name = team_name

    @property
    def team_tag(self):
        """
        Gets the team_tag of this InlineResponse20025.
        Player's team shorthand tag, e.g. 'EG'

        :return: The team_tag of this InlineResponse20025.
        :rtype: str
        """
        return self._team_tag

    @team_tag.setter
    def team_tag(self, team_tag):
        """
        Sets the team_tag of this InlineResponse20025.
        Player's team shorthand tag, e.g. 'EG'

        :param team_tag: The team_tag of this InlineResponse20025.
        :type: str
        """

        self._team_tag = team_tag

    @property
    def is_locked(self):
        """
        Gets the is_locked of this InlineResponse20025.
        Whether the roster lock is active

        :return: The is_locked of this InlineResponse20025.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """
        Sets the is_locked of this InlineResponse20025.
        Whether the roster lock is active

        :param is_locked: The is_locked of this InlineResponse20025.
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def is_pro(self):
        """
        Gets the is_pro of this InlineResponse20025.
        Whether the player is professional or not

        :return: The is_pro of this InlineResponse20025.
        :rtype: bool
        """
        return self._is_pro

    @is_pro.setter
    def is_pro(self, is_pro):
        """
        Sets the is_pro of this InlineResponse20025.
        Whether the player is professional or not

        :param is_pro: The is_pro of this InlineResponse20025.
        :type: bool
        """

        self._is_pro = is_pro

    @property
    def locked_until(self):
        """
        Gets the locked_until of this InlineResponse20025.
        When the roster lock will end

        :return: The locked_until of this InlineResponse20025.
        :rtype: int
        """
        return self._locked_until

    @locked_until.setter
    def locked_until(self, locked_until):
        """
        Sets the locked_until of this InlineResponse20025.
        When the roster lock will end

        :param locked_until: The locked_until of this InlineResponse20025.
        :type: int
        """

        self._locked_until = locked_until

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
