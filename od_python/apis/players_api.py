# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more. 

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PlayersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def players_account_id_counts_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/counts
        Counts in categories

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_counts_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_counts_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_counts_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_counts_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/counts
        Counts in categories

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_counts_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_counts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_counts_get`")

        resource_path = '/players/{account_id}/counts'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20013',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}
        Player data

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}
        Player data

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_get`")

        resource_path = '/players/{account_id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20012',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_heroes_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/heroes
        Heroes played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_heroes_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20014]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_heroes_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_heroes_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_heroes_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/heroes
        Heroes played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_heroes_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20014]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_heroes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_heroes_get`")

        resource_path = '/players/{account_id}/heroes'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InlineResponse20014]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_histograms_field_get(self, account_id, field, **kwargs):
        """
        GET /players/{account_id}/histograms
        Distribution of matches in a single stat

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_histograms_field_get(account_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param str field: Field to aggregate on (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_histograms_field_get_with_http_info(account_id, field, **kwargs)
        else:
            (data) = self.players_account_id_histograms_field_get_with_http_info(account_id, field, **kwargs)
            return data

    def players_account_id_histograms_field_get_with_http_info(self, account_id, field, **kwargs):
        """
        GET /players/{account_id}/histograms
        Distribution of matches in a single stat

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_histograms_field_get_with_http_info(account_id, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param str field: Field to aggregate on (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'field', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_histograms_field_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_histograms_field_get`")
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `players_account_id_histograms_field_get`")

        resource_path = '/players/{account_id}/histograms/{field}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']
        if 'field' in params:
            path_params['field'] = params['field']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[object]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_matches_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/matches
        Matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_matches_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :param str project: Fields to project (array)
        :return: list[InlineResponse20015]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_matches_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_matches_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_matches_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/matches
        Matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_matches_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :param str project: Fields to project (array)
        :return: list[InlineResponse20015]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort', 'project']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_matches_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_matches_get`")

        resource_path = '/players/{account_id}/matches'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'project' in params:
            query_params['project'] = params['project']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InlineResponse20015]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_peers_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/peers
        Players played with

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_peers_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20016]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_peers_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_peers_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_peers_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/peers
        Players played with

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_peers_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20016]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_peers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_peers_get`")

        resource_path = '/players/{account_id}/peers'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InlineResponse20016]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_pros_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/pros
        Pro players played with

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_pros_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20017]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_pros_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_pros_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_pros_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/pros
        Pro players played with

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_pros_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20017]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_pros_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_pros_get`")

        resource_path = '/players/{account_id}/pros'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InlineResponse20017]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_rankings_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/rankings
        Player hero rankings

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_rankings_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_rankings_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_rankings_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_rankings_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/rankings
        Player hero rankings

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_rankings_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_rankings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_rankings_get`")

        resource_path = '/players/{account_id}/rankings'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[object]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_ratings_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/ratings
        Player rating history

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_ratings_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_ratings_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_ratings_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_ratings_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/ratings
        Player rating history

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_ratings_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_ratings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_ratings_get`")

        resource_path = '/players/{account_id}/ratings'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InlineResponse20018]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_recent_matches_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/recentMatches
        Recent matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_recent_matches_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[InlineResponse20019]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_recent_matches_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_recent_matches_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_recent_matches_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/recentMatches
        Recent matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_recent_matches_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: list[InlineResponse20019]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_recent_matches_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_recent_matches_get`")

        resource_path = '/players/{account_id}/recentMatches'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InlineResponse20019]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_refresh_post(self, account_id, **kwargs):
        """
        POST /players/{account_id}/refresh
        Refresh player match history

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_refresh_post(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_refresh_post_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_refresh_post_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_refresh_post_with_http_info(self, account_id, **kwargs):
        """
        POST /players/{account_id}/refresh
        Refresh player match history

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_refresh_post_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_refresh_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_refresh_post`")

        resource_path = '/players/{account_id}/refresh'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_totals_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/totals
        Totals in stats

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_totals_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20020]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_totals_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_totals_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_totals_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/totals
        Totals in stats

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_totals_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: list[InlineResponse20020]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_totals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_totals_get`")

        resource_path = '/players/{account_id}/totals'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InlineResponse20020]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_wardmap_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wardmap
        Wards placed in matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wardmap_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_wardmap_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_wardmap_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_wardmap_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wardmap
        Wards placed in matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wardmap_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_wardmap_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_wardmap_get`")

        resource_path = '/players/{account_id}/wardmap'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20021',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_wl_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wl
        Win/Loss count

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wl_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_wl_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_wl_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_wl_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wl
        Win/Loss count

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wl_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_wl_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_wl_get`")

        resource_path = '/players/{account_id}/wl'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20022',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def players_account_id_wordcloud_get(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wordcloud
        Words said/read in matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wordcloud_get(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.players_account_id_wordcloud_get_with_http_info(account_id, **kwargs)
        else:
            (data) = self.players_account_id_wordcloud_get_with_http_info(account_id, **kwargs)
            return data

    def players_account_id_wordcloud_get_with_http_info(self, account_id, **kwargs):
        """
        GET /players/{account_id}/wordcloud
        Words said/read in matches played

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.players_account_id_wordcloud_get_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int account_id: Steam32 account ID (required)
        :param int limit: Number of matches to limit to
        :param int offset: Number of matches to offset start by
        :param int win: Whether the player won
        :param int patch: Patch ID
        :param int game_mode: Game Mode ID
        :param int lobby_type: Lobby type ID
        :param int region: Region ID
        :param int date: Days previous
        :param int lane_role: Lane Role ID
        :param int hero_id: Hero ID
        :param int is_radiant: Whether the player was radiant
        :param int included_account_id: Account IDs in the match (array)
        :param int excluded_account_id: Account IDs not in the match (array)
        :param int with_hero_id: Hero IDs on the player's team (array)
        :param int against_hero_id: Hero IDs against the player's team (array)
        :param int significant: Whether the match was significant for aggregation purposes. Defaults to 1 (true), set this to 0 to return data for non-standard modes/matches.
        :param int having: The minimum number of games played, for filtering hero stats
        :param str sort: The field to return matches sorted by in descending order
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'offset', 'win', 'patch', 'game_mode', 'lobby_type', 'region', 'date', 'lane_role', 'hero_id', 'is_radiant', 'included_account_id', 'excluded_account_id', 'with_hero_id', 'against_hero_id', 'significant', 'having', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method players_account_id_wordcloud_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `players_account_id_wordcloud_get`")

        resource_path = '/players/{account_id}/wordcloud'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'win' in params:
            query_params['win'] = params['win']
        if 'patch' in params:
            query_params['patch'] = params['patch']
        if 'game_mode' in params:
            query_params['game_mode'] = params['game_mode']
        if 'lobby_type' in params:
            query_params['lobby_type'] = params['lobby_type']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'lane_role' in params:
            query_params['lane_role'] = params['lane_role']
        if 'hero_id' in params:
            query_params['hero_id'] = params['hero_id']
        if 'is_radiant' in params:
            query_params['is_radiant'] = params['is_radiant']
        if 'included_account_id' in params:
            query_params['included_account_id'] = params['included_account_id']
        if 'excluded_account_id' in params:
            query_params['excluded_account_id'] = params['excluded_account_id']
        if 'with_hero_id' in params:
            query_params['with_hero_id'] = params['with_hero_id']
        if 'against_hero_id' in params:
            query_params['against_hero_id'] = params['against_hero_id']
        if 'significant' in params:
            query_params['significant'] = params['significant']
        if 'having' in params:
            query_params['having'] = params['having']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20023',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
